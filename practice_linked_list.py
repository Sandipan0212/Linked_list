# -*- coding: utf-8 -*-
"""practice_Linked_list.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D7PuQVIxtfhEGMbIK4He3HJ-HIcCJolo
"""

class Node():
  def __init__(self,data):
    self.data = data
    self.next = None

def inputtolist():
  list = [int(x) for x in input().split()]

  head = None
  tail = None
  for i in list:
    if i == -1:
      break
    newnode = Node(i)
    if head is None:
      head = newnode
      tail = newnode
    else:
      tail.next = newnode
      tail = newnode
  return head

def printlist(head):
  while head is not None:
    print(str(head.data)+"->",end= " ")
    head = head.next
  print("None")
  #return

a = inputtolist()
printlist(a)

def L(head):
  count = 0
  while head is not None:
    count = count + 1
    head = head.next
  return count

printlist(a)
L(a)

def insert(head,i,data):

  prev = None
  curr = head
  count = 0

  if i < 0 or i > L(head):
    return head

  while count < i:
    prev = curr
    curr = curr.next
    count = count + 1

  newnode = Node(data)

  if prev is not None:
    prev.next = newnode
  else:
    head = newnode

  newnode.next = curr
  return head

c = inputtolist()
printlist(c)
d = insert(c,2,6)
printlist(d)

def deletefromi(head,i):

  if i < 0 or i > L(head):
    return head

  count = 0
  prev = None
  curr = head

  while count < i :
    prev = curr
    curr = curr.next
    count = count + 1

  if prev is not None:
    prev.next = curr.next
  else:
    head = head.next
  return head

printlist(d)
f = deletefromi(d,2)
printlist(f)

#printindex of data

def printindex(head,del_data):

  count = 0
  curr = head

  while count < L(head):
    if curr.data == del_data:
      return count
    else:
      curr = curr.next
      count = count + 1
  return -1

printlist(f)
printindex(f,5)

def deletedatafromlist(head, delete_data):

  prev = None
  count = 0
  curr = head

  if head.data == delete_data:
    head = head.next
    return head

  while count < L(head):

    if curr.data == delete_data:
      prev.next = curr.next
    else:
      prev = curr
      curr = curr.next
    count = count + 1
  return head

p = inputtolist()
printlist(p)

g = deletedatafromlist(p,3)
printlist(g)

e = deletedatafromlist(p,6)
printlist(e)

def reverselist(head):
  prev = None
  Next = None
  curr = head
  while curr is not None:
    Next = curr.next
    curr.next = prev
    prev = curr
    curr = Next
  head = prev
  return head

z = inputtolist()
printlist(z)
y = reverselist(z)
printlist(y)

#rotate by k times

def rotatek(head, k):
  count = 0
  curr = head
  tail = head
  while tail.next is not None:
    tail = tail.next
  while count < k:
    tail.next = curr
    tail = curr
    head = head.next
    curr.next = None
    curr = head
    count = count + 1
  return head

A = inputtolist()
printlist(A)
B = rotatek(A, 0)
printlist(B)

def removeduplicates(head):
  curr = head
  while curr.next is not None:
    if curr.data != curr.next.data:
      curr = curr.next
    else:
      curr.next = curr.next.next
  return head

arr = inputtolist()
arr1 = removeduplicates(arr)
printlist(arr1)

def palindrome(head):
  arr = []
  while head is not None:
    arr.append(head.data)
    head = head.next
  for i in range (len(arr)):
    if arr[i] != arr[len(arr)-i-1]:
      return False
    # else:
    #   return False
  return True

a1 = inputtolist()
palindrome(a1)



