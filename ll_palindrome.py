# -*- coding: utf-8 -*-
"""LL_palindrome.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13i8oqSGCBliEePQx886NXvHB5GLDX2V3
"""

class Node():
  def __init__(self,data):
    self.data = data
    self.next = None

def inputtolist():
  list = [int(x) for x in input().split()]

  head = None
  tail = None
  for i in list:
    if i == -1:
      break
    newnode = Node(i)
    if head is None:
      head = newnode
      tail = newnode
    else:
      tail.next = newnode
      tail = newnode
  return head

def printlist(head):
  while head is not None:
    print(str(head.data)+"->",end= " ")
    head = head.next
  print("None")
  #return

def L(head):
  count = 0
  while head is not None:
    count = count + 1
    head = head.next
  return count

def checkpalindrome(head):
  slow = head
  fast = head
  while fast.next != None and fast.next.next != None:
    slow = slow.next
    fast = fast.next.next

  print(slow.data)
  ptr = slow.next

  ptr1 = None
  ptr2 = None

  while ptr is not None:
    ptr2 = ptr.next
    ptr.next = ptr1
    ptr1 = ptr
    ptr = ptr2

  #mid=slow.next
  slow.next = ptr1
  ptr = slow.next
  print(ptr.data)

  start = head
  while slow.next is not None:
    if start.data != ptr.data:
      return False
    slow = slow.next
    start = start.next
    ptr = ptr.next

  return True

a = inputtolist()
printlist(a)
checkpalindrome(a)

def removeConsecutiveDuplicates(string):

  new = string[0]

  for i in range (len(string)-1):
    if string[i] != string[i+1]:
      new = new + string[i+1]
  return new

removeConsecutiveDuplicates("aaaabbbcccdddd")

def reverseword(string):
  L = string.split()
  newstr = " "
  for i in L:
    new = " "
    for j in range (len(i),0,-1):
      new = new + i[j-1]
    newstr = newstr + new + " "
  return newstr






reverseword("Hello Sandipan")

def inputtolist_loop():
  list = [int(x) for x in input().split()]

  head = None
  tail = None

  for i in list:
    if i == -1:
      break
    newnode = Node(i)
    if head is None:
      head = newnode
      tail = newnode
    else:
      tail.next = newnode
      tail = newnode

  slow = head
  fast = head
  while fast.next is not None and fast.next.next is not None:
    slow = slow.next
    fast = fast.next.next
  tail.next = slow


  return head

c = inputtolist_loop()

def detect_loop(head):
  slow = head
  fast = head
  while fast is not None and fast.next is not None:
    slow = slow.next
    fast = fast.next.next
    if slow == fast:
      return slow

  return

detect_loop(c)

def remove_loop(head):
  meet = detect_loop(head)
  start = head
  prev = None
  while meet != start:
    prev = meet
    meet = meet.next
    start = start.next
  prev.next = None
  return head

f = inputtolist_loop()
g = remove_loop(f)
printlist(f)

